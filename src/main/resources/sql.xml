<Queries>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- - - - - - - - - - - - USERTABLE SQL COMMANDS - - - - - - - - - - - - - -->

    <getUserById>
        SELECT * FROM usertable WHERE id = ?;
    </getUserById>

    <getUserByRiftTag>
        SELECT * FROM usertable WHERE rift_tag = ?;
    </getUserByRiftTag>

    <getNumberFollowingById>
        SELECT COUNT(*)
        FROM following
        WHERE follower_id = ?;
    </getNumberFollowingById>

    <getNumberGamesPlayedByUserId>
        SELECT COUNT(*)
        FROM gamerequest g JOIN riftergame r ON g.session_id = r.id
        WHERE riftee_id = ? AND accepted = true AND r.session_time &lt; current_timestamp
    </getNumberGamesPlayedByUserId>

    <getRatingInfoByUserId>
        SELECT COUNT(*), u.?
        FROM userrating r, usertable u
        WHERE r.rift_id = ? AND u.id = ?
        GROUP BY (u.rifter_rating);
    </getRatingInfoByUserId>

    <getFollowersById>
        SELECT *
        FROM following
        WHERE following_id = ?;
    </getFollowersById>

    <getFollowingsById>
        SELECT *
        FROM following
        WHERE follower_id = ?;
    </getFollowingsById>

    <getFollowersAndInfoById>
        SELECT *
        FROM following f JOIN usertable u
        ON f.follower_id = u.id
        WHERE f.following_id = ?;
    </getFollowersAndInfoById>

    <getFollowingsAndInfoById>
        SELECT *
        FROM following f JOIN usertable u
        ON f.following_id = u.id
        WHERE f.follower_id = ?;
    </getFollowingsAndInfoById>

    <getNumberFollowersById>
        SELECT COUNT(*)
        FROM following
        WHERE following_id = ?;
    </getNumberFollowersById>

    <getUserActivity>
        SELECT *
        FROM notification
        WHERE creator_id = ?
    </getUserActivity>

    <getUserNotifications>
        SELECT *
        FROM notification
        WHERE user_id = ?
    </getUserNotifications>

    <getUserActiviyAndUserSession>
        SELECT *
        FROM notification n JOIN riftergame r
        ON n.session_id = r.id
        WHERE n.user_id = ?
    </getUserActiviyAndUserSession>

    <getUserAndRifterSessions>
        SELECT *
        FROM riftergame
        WHERE host_id = ?
    </getUserAndRifterSessions>

    <getGameRequestsAndGameInfoByUserId>
        SELECT *
        FROM gamerequest g JOIN riftergame r
        ON g.session_id = r.id
        WHERE g.riftee_id = ?;
    </getGameRequestsAndGameInfoByUserId>

    <getGameRequestsAndHostInfoByUserId>
        SELECT *
        FROM gamerequest g JOIN usertable u
        ON g.host_id = u.id
        WHERE g.riftee_id = ?;
    </getGameRequestsAndHostInfoByUserId>

    <getGameRequestsAndGameInfoAndHostInfoByUserId>
        SELECT *
        FROM gamerequest g JOIN usertable u
        ON g.host_id = u.id
        JOIN riftergame r
        ON g.session_id = r.id
        WHERE g.riftee_id = ?;
    </getGameRequestsAndGameInfoAndHostInfoByUserId>

    <getRequestsByUser>
        SELECT *
        FROM gamerequest
        WHERE riftee_id = ?;
    </getRequestsByUser>

    <getGameRequestsByUserAndAccepted>
        SELECT *
        FROM gamerequest
        WHERE riftee_id = ? AND accepted = ?;
    </getGameRequestsByUserAndAccepted>

    <getGameRequestsAndGameInfoByUserIdAndAccepted>
        SELECT *
        FROM gamerequest g JOIN riftergame r
        ON g.session_id = r.id
        WHERE g.riftee_id = ? AND accepted = ?
    </getGameRequestsAndGameInfoByUserIdAndAccepted>

    <getGameRequestsAndHostInfoByUserIdAndAccepted>
        SELECT *
        FROM gamerequest g JOIN usertable u
        ON g.host_id = u.id
        WHERE g.riftee_id = ? AND accepted = ?;
    </getGameRequestsAndHostInfoByUserIdAndAccepted>

    <getGameRequestsAndHostInfoAndSessionInfoByUserIdAndAccepted>
        SELECT *
        FROM gamerequest g JOIN usertable u
        ON g.host_id = u.id
        JOIN riftergame r
        ON g.session_id = r.id
        WHERE g.riftee_id = ? AND accepted = ?;
    </getGameRequestsAndHostInfoAndSessionInfoByUserIdAndAccepted>

    <getGameRequestsByUserIdAndAccepted>
        SELECT *
        FROM gamerequest
        WHERE riftee_id = ? AND accepted = ?
    </getGameRequestsByUserIdAndAccepted>

    <getBroadcastNotificationsById>
        SELECT n.id, user_id, notification_type, notification_content, session_id, created_time, creator_id,  us.first_name, us.last_name, us.is_private, us.is_suspended, us.profile_picture_path, us.rift_tag, us.riftee_rating, us.rifter_rating
        FROM usertable us JOIN following f ON us.id = f.follower_id
        JOIN notification n ON f.following_id = n.creator_id
        WHERE us.id = ? AND n.notification_type = 'New Game';
    </getBroadcastNotificationsById>

    <getBroadcastNotificationsForFollower>
        SELECT n.id, user_id, notification_type, notification_content, session_id, created_time, creator_id,  u.first_name, u.last_name, u.is_private, u.is_suspended, u.profile_picture_path, u.rift_tag, u.riftee_rating, u.rifter_rating, u.gender, u.auth0_Token
        FROM usertable us JOIN following f ON us.id = f.follower_id
        JOIN notification n ON f.following_id = n.creator_id
        JOIN usertable u ON f.following_id = u.id
        WHERE us.id = ? AND n.notification_type = 'New Game';
    </getBroadcastNotificationsForFollower>

    <createUser>
        INSERT INTO usertable
        (first_name, last_name, rift_tag, is_private, is_suspended, auth0_token)
        VALUES(?, ?, ?, false, false, ?);
    </createUser>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- - - - - - - - - - - - RIFTER GAME SQL COMMANDS - - - - - - - - - - - - - -->

    <getRifterGameById>
        SELECT *
        FROM riftergame
        WHERE id = ?;
    </getRifterGameById>

    <getGameByHostAndPlayerId>
        SELECT *
        FROM gamerequest g JOIN riftergame r
        ON g.host_id = r.host_id AND g.session_id = r.id
        WHERE g.riftee_id = ? AND g.host_id = ? AND r.session_time &lt; current_timestamp;
    </getGameByHostAndPlayerId>

    <getRifterGameAndHostByGameId>
        SELECT *
        FROM riftergame r JOIN usertable u
        ON r.host_id = u.id
        WHERE r.id = ?
    </getRifterGameAndHostByGameId>

    <getRifterSessionByHostIdAndSessionTime>
        SELECT *
        FROM riftergame
        WHERE host_id = ? AND session_time = ?
    </getRifterSessionByHostIdAndSessionTime>

    <getGamePlayersByGameId>
        SELECT u.*
        FROM gamerequest g JOIN usertable u
        ON g.riftee_id = u.id
        WHERE g.session_id = ?
    </getGamePlayersByGameId>

    <createGame>
        INSERT INTO riftergame
        (host_id, num_slots, session_cost, title, session_duration, session_time, game, console, slots_remaining, created_time)
        VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
    </createGame>

    <createNotification>
        INSERT INTO notification
        (user_id, notification_type, notification_content, session_id, created_time, creator_id)
        VALUES(?, ?, ?, ?, current_timestamp, ?);
    </createNotification>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- - - - - - - - - - - - FOLLOWING SQL COMMANDS - - - - - - - - - - - - - -->

    <isFollowing>
        SELECT *
        FROM usertable u JOIN following f
        ON u.id = f.follower_id
        WHERE u.rift_tag = ? AND f.following_id = ?;
    </isFollowing>

    <follow>
        INSERT INTO following
        (follower_id, following_id, accepted)
        VALUES(?, ?, ?);
    </follow>

    <!-- Named as such because this query can either be used to unfollow or to deny a follow request. The action is the same -->
    <removeFollowing>
        DELETE FROM following
        WHERE follower_id = ? AND following_id = ?;
    </removeFollowing>


    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- - - - - - - - - - - - SEARCH SQL COMMANDS - - - - - - - - - - - - - -->

    <searchUsertable>
        SELECT *
        FROM (
            SELECT u.*, levenshtein(rift_tag, ?, 3, 2, 5) as op, levenshtein(first_name, ?, 3, 2, 5) as op2, CAST(((levenshtein(lower(first_name || ' ' || last_name), lower(?), 3, 2, 5) + levenshtein(first_name || ' ' || last_name, ?, 3,2,5)) / 2.0) as float) as op3
            FROM usertable u
        ) as t
        WHERE op &lt; ? OR op2 &lt; ? OR op3 &lt; ? OR op &lt; (7 + ceil(3*(ln(char_length(t.rift_tag))))) OR op2 &lt; (7 + ceil(3*(ln(char_length(t.first_name))))) OR op3 &lt; (7 + ceil(3*(ln(char_length(t.first_name || ' ' || t.last_name)))))
        ORDER BY LEAST(op, op2, op3)
        LIMIT 25;
    </searchUsertable>

    <searchRifterSession>
        SELECT *
        FROM (
            SELECT r.*, levenshtein(game, ?, 3, 2, 5) as op, levenshtein(split_part(game, ' ', 1), ?, 3, 2, 5) as op2, u.*
            FROM riftergame r
            JOIN usertable u
            ON r.host_id = u.id
        ) as t
        WHERE op &lt; ? OR op2 &lt; ? OR op &lt; (7 + ceil(3*(ln(char_length(t.game))))) OR op2 &lt; (7 + ceil(3*(ln(char_length(split_part(t.game, ' ', 1))))))
        ORDER BY LEAST(op, op2)
        LIMIT 25;
    </searchRifterSession>

    <createRating>
        INSERT INTO userrating
        (rift_id, account_type, rating, review, reviewer_id, created_time, review_title)
        VALUES(?, ?, ?, ?, ?, ?, ?);
    </createRating>

    <getUserRatingByIds>
        SELECT *
        FROM userrating
        WHERE rift_id = ? AND reviewer_id = ? AND account_type = ?;
    </getUserRatingByIds>

    <getUserRatingsAndReviewerUsertablesById>
        SELECT *
        FROM userrating r JOIN usertable u
        ON r.reviewer_id = u.id
        WHERE r.rift_id = ?;
    </getUserRatingsAndReviewerUsertablesById>

    <!--
        CREATE OR REPLACE FUNCTION create_review()
            RETURNS trigger AS
        $BODY$
        DECLARE
            current_rifter_rating float;
            current_riftee_rating float;
        BEGIN
            SELECT u.rifter_rating into current_rifter_rating
            FROM usertable u
            WHERE id = NEW.rift_id;
            SELECT u.riftee_rating into current_riftee_rating
            FROM usertable u
            WHERE id = NEW.rift_id;
            IF NEW.account_type = true THEN
                IF current_rifter_rating IS NULL THEN
                    current_rifter_rating := 0;
                END IF;
                UPDATE usertable
                SET rifter_rating = n.rifter_rating
                FROM (
                    SELECT ((((COUNT(*) - 1) * current_rifter_rating) + NEW.rating) / COUNT(*)) as rifter_rating
                    FROM usertable u, userrating r
                    WHERE u.id = NEW.rift_id AND r.rift_id = NEW.rift_id
                    GROUP BY (u.rifter_rating)
                    ) as n
                WHERE id = NEW.rift_id;
                RETURN NEW;
            ELSE
                IF current_riftee_rating IS NULL THEN
                    current_riftee_rating := 0;
                END IF;
                UPDATE usertable
                SET riftee_rating = n.riftee_rating
                FROM (
                    SELECT ((((COUNT(*) - 1) * current_riftee_rating) + NEW.rating) / COUNT(*)) as riftee_rating
                    FROM usertable u, userrating r
                    WHERE u.id = NEW.rift_id AND r.rift_id = NEW.rift_id
                    GROUP BY(u.riftee_rating)
                    ) as n
                WHERE id = NEW.rift_id;
                RETURN NEW;
            END IF;
        END;
        $BODY$
        LANGUAGE plpgsql;
   -->

</Queries>